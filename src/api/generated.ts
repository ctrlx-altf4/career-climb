/**
 * Generated by orval v6.16.0 🍺
 * Do not edit manually.
 * Career Climb
 * The Career Climb API description
 * OpenAPI spec version: 1.0
 */
import { useQuery, useMutation } from "@tanstack/react-query";
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from "@tanstack/react-query";
import { useAxios } from "./useAxios";
import type { ErrorType, BodyType } from "./useAxios";
export interface CreateFeedbackInterviewerDto {
  interview_id: number;
  interviewer_rating: number;
  interviewer_remarks: string;
}

export interface CreateFeedbackDto {
  interview_id: number;
  performance_rating: number;
  knowledge_depth_rating: number;
  confidence_rating: number;
  communication_skill_rating: number;
  strength: string;
  area_of_improvements: string;
  suggestions: string;
}

export type ApplicantResponseInterviewerUser = {
  name?: string;
  image_url?: string;
};

export type ApplicantResponseInterviewer = {
  current_company?: string;
  experience?: number;
  user?: ApplicantResponseInterviewerUser;
};

export interface ApplicantResponse {
  session_id: number;
  payment_id: string;
  interview_date: string;
  interview_time: number;
  interview_status: string;
  applicant_id: number;
  interviewer: ApplicantResponseInterviewer;
}

export type InterviewerResponseApplicantUser = {
  name?: string;
  image_url?: string;
};

export type InterviewerResponseApplicant = {
  github_url?: string;
  linkedin_url?: string;
  current_company?: string;
  experience?: number;
  user?: InterviewerResponseApplicantUser;
};

export interface InterviewerResponse {
  session_id: number;
  interview_date: string;
  payment_id: string;
  interview_time: number;
  interview_status: string;
  interviewer_id: number;
  applicant: InterviewerResponseApplicant;
}

export interface CheckForPaymentDto {
  session_id: number;
  pidx: string;
}

export interface KhaltiResponse {
  pidx: string;
  payment_url: string;
  expires_at: string;
  expires_in: string;
}

export interface PayForInterViewDto {
  session_id: number;
}

export interface CreateInterviewDto {
  interview_date: string;
  interview_time: number;
  interview_status: string;
  payment_id: string;
  interviewer_id: number;
  applicant_id: number;
}

export interface UpdateSkillDto {
  skill_name?: string;
  user_id?: number;
  skill_experience?: number;
}

export interface Skill {
  skill_name: string;
}

export interface UserSkillResponse {
  skill_id: number;
  skill_name: string;
  skill_experience: number;
  skill: Skill;
}

export interface AllSkillResponse {
  skill_id: number;
  skill_name: string;
}

export interface CreateSkillDto {
  skill_name: string;
  user_id: number;
  skill_experience: number;
}

export interface GetInterviewScheduleDto {
  id: number;
  availability_date: string;
  availability_time: number;
  status: boolean;
  interviewer_id: number;
}

export interface CreateScheduleDto {
  availability_date: string;
  availability_time: number;
  status: boolean;
  interviewer_id: number;
}

export interface BulkCreateScheduleDto {
  data: CreateScheduleDto[];
}

export interface UpdateInterviewerDto {
  experience?: number;
  interview_count?: number;
  dob?: string;
  address?: string;
  phone?: string;
  current_company?: string;
  price?: number;
  rating?: number;
  user_id?: number;
}

export interface InterviewerProfileResponse {
  dob: string;
  address: string;
  phone: string;
  price: number;
}

export interface GetInterviewerDto {
  id: number;
  experience: number;
  interview_count: number;
  dob: string;
  address: string;
  phone: string;
  current_company: string;
  price: number;
  rating: number;
  user_id: number;
}

export type AllInterviewerResponseUser = {
  name?: string;
  image_url?: string;
};

export interface AllInterviewerResponse {
  experience: number;
  user_id: number;
  address: string;
  current_company: string;
  price: number;
  rating: number;
  user: AllInterviewerResponseUser;
}

export interface CreateInterviewerDto {
  experience: number;
  interview_count: number;
  dob: string;
  address: string;
  phone: string;
  current_company: string;
  price: number;
  rating: number;
  user_id: number;
}

export interface PersonalProfileResponse {
  dob: string;
  address: string;
  phone: string;
}

export interface SocialProfileResponse {
  linkedin_url: string;
  github_url: string;
}

export interface GetApplicantDto {
  id: number;
  experience: number;
  interview_count: number;
  dob: string;
  address: string;
  phone: string;
  current_company: string;
  linkedin_url: string;
  github_url: string;
  rating: number;
  user_id: number;
}

export interface CreateApplicantDto {
  experience: number;
  interview_count: number;
  dob: string;
  address: string;
  phone: string;
  current_company: string;
  linkedin_url: string;
  github_url: string;
  rating: number;
  user_id: number;
}

export interface SelfResponseDto {
  id: number;
  name: string;
  email: string;
  image_url: string;
  role: string;
  createAt: string;
  updateAt: string;
  hasProfile: boolean;
}

export interface UpdateUserRoleDto {
  role: string;
}

export const useAppControllerGetHelloHook = () => {
  const appControllerGetHello = useAxios<void>();

  return (signal?: AbortSignal) => {
    return appControllerGetHello({ url: `/`, method: "get", signal });
  };
};

export const getAppControllerGetHelloQueryKey = () => [`/`] as const;

export const useAppControllerGetHelloQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useAppControllerGetHelloHook>>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useAppControllerGetHelloHook>>>,
    TError,
    TData
  >;
}): UseQueryOptions<
  Awaited<ReturnType<ReturnType<typeof useAppControllerGetHelloHook>>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAppControllerGetHelloQueryKey();

  const appControllerGetHello = useAppControllerGetHelloHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useAppControllerGetHelloHook>>>
  > = ({ signal }) => appControllerGetHello(signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type AppControllerGetHelloQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useAppControllerGetHelloHook>>>
>;
export type AppControllerGetHelloQueryError = ErrorType<unknown>;

export const useAppControllerGetHello = <
  TData = Awaited<ReturnType<ReturnType<typeof useAppControllerGetHelloHook>>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useAppControllerGetHelloHook>>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useAppControllerGetHelloQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const useUserControllerChangeUserRoleHook = () => {
  const userControllerChangeUserRole = useAxios<void>();

  return (updateUserRoleDto: BodyType<UpdateUserRoleDto>) => {
    return userControllerChangeUserRole({
      url: `/user/change-role`,
      method: "post",
      headers: { "Content-Type": "application/json" },
      data: updateUserRoleDto,
    });
  };
};

export const useUserControllerChangeUserRoleMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useUserControllerChangeUserRoleHook>>>,
    TError,
    { data: BodyType<UpdateUserRoleDto> },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useUserControllerChangeUserRoleHook>>>,
  TError,
  { data: BodyType<UpdateUserRoleDto> },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const userControllerChangeUserRole = useUserControllerChangeUserRoleHook();

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useUserControllerChangeUserRoleHook>>>,
    { data: BodyType<UpdateUserRoleDto> }
  > = (props) => {
    const { data } = props ?? {};

    return userControllerChangeUserRole(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UserControllerChangeUserRoleMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useUserControllerChangeUserRoleHook>>>
>;
export type UserControllerChangeUserRoleMutationBody =
  BodyType<UpdateUserRoleDto>;
export type UserControllerChangeUserRoleMutationError = ErrorType<unknown>;

export const useUserControllerChangeUserRole = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useUserControllerChangeUserRoleHook>>>,
    TError,
    { data: BodyType<UpdateUserRoleDto> },
    TContext
  >;
}) => {
  const mutationOptions =
    useUserControllerChangeUserRoleMutationOptions(options);

  return useMutation(mutationOptions);
};

export const useUserControllerSelfHook = () => {
  const userControllerSelf = useAxios<SelfResponseDto>();

  return (signal?: AbortSignal) => {
    return userControllerSelf({ url: `/user/me`, method: "get", signal });
  };
};

export const getUserControllerSelfQueryKey = () => [`/user/me`] as const;

export const useUserControllerSelfQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useUserControllerSelfHook>>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useUserControllerSelfHook>>>,
    TError,
    TData
  >;
}): UseQueryOptions<
  Awaited<ReturnType<ReturnType<typeof useUserControllerSelfHook>>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUserControllerSelfQueryKey();

  const userControllerSelf = useUserControllerSelfHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useUserControllerSelfHook>>>
  > = ({ signal }) => userControllerSelf(signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type UserControllerSelfQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useUserControllerSelfHook>>>
>;
export type UserControllerSelfQueryError = ErrorType<unknown>;

export const useUserControllerSelf = <
  TData = Awaited<ReturnType<ReturnType<typeof useUserControllerSelfHook>>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useUserControllerSelfHook>>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useUserControllerSelfQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const useAuthControllerGoogleAuthHook = () => {
  const authControllerGoogleAuth = useAxios<void>();

  return (signal?: AbortSignal) => {
    return authControllerGoogleAuth({ url: `/google`, method: "get", signal });
  };
};

export const getAuthControllerGoogleAuthQueryKey = () => [`/google`] as const;

export const useAuthControllerGoogleAuthQueryOptions = <
  TData = Awaited<
    ReturnType<ReturnType<typeof useAuthControllerGoogleAuthHook>>
  >,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useAuthControllerGoogleAuthHook>>>,
    TError,
    TData
  >;
}): UseQueryOptions<
  Awaited<ReturnType<ReturnType<typeof useAuthControllerGoogleAuthHook>>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAuthControllerGoogleAuthQueryKey();

  const authControllerGoogleAuth = useAuthControllerGoogleAuthHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useAuthControllerGoogleAuthHook>>>
  > = ({ signal }) => authControllerGoogleAuth(signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type AuthControllerGoogleAuthQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useAuthControllerGoogleAuthHook>>>
>;
export type AuthControllerGoogleAuthQueryError = ErrorType<unknown>;

export const useAuthControllerGoogleAuth = <
  TData = Awaited<
    ReturnType<ReturnType<typeof useAuthControllerGoogleAuthHook>>
  >,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useAuthControllerGoogleAuthHook>>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useAuthControllerGoogleAuthQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const useAuthControllerGoogleAuthRedirectHook = () => {
  const authControllerGoogleAuthRedirect = useAxios<void>();

  return (signal?: AbortSignal) => {
    return authControllerGoogleAuthRedirect({
      url: `/google/redirect`,
      method: "get",
      signal,
    });
  };
};

export const getAuthControllerGoogleAuthRedirectQueryKey = () =>
  [`/google/redirect`] as const;

export const useAuthControllerGoogleAuthRedirectQueryOptions = <
  TData = Awaited<
    ReturnType<ReturnType<typeof useAuthControllerGoogleAuthRedirectHook>>
  >,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<
      ReturnType<ReturnType<typeof useAuthControllerGoogleAuthRedirectHook>>
    >,
    TError,
    TData
  >;
}): UseQueryOptions<
  Awaited<
    ReturnType<ReturnType<typeof useAuthControllerGoogleAuthRedirectHook>>
  >,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAuthControllerGoogleAuthRedirectQueryKey();

  const authControllerGoogleAuthRedirect =
    useAuthControllerGoogleAuthRedirectHook();

  const queryFn: QueryFunction<
    Awaited<
      ReturnType<ReturnType<typeof useAuthControllerGoogleAuthRedirectHook>>
    >
  > = ({ signal }) => authControllerGoogleAuthRedirect(signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type AuthControllerGoogleAuthRedirectQueryResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof useAuthControllerGoogleAuthRedirectHook>>
  >
>;
export type AuthControllerGoogleAuthRedirectQueryError = ErrorType<unknown>;

export const useAuthControllerGoogleAuthRedirect = <
  TData = Awaited<
    ReturnType<ReturnType<typeof useAuthControllerGoogleAuthRedirectHook>>
  >,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<
      ReturnType<ReturnType<typeof useAuthControllerGoogleAuthRedirectHook>>
    >,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useAuthControllerGoogleAuthRedirectQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const useApplicantControllerCreateHook = () => {
  const applicantControllerCreate = useAxios<void>();

  return (createApplicantDto: BodyType<CreateApplicantDto>) => {
    return applicantControllerCreate({
      url: `/applicant-profile`,
      method: "post",
      headers: { "Content-Type": "application/json" },
      data: createApplicantDto,
    });
  };
};

export const useApplicantControllerCreateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useApplicantControllerCreateHook>>>,
    TError,
    { data: BodyType<CreateApplicantDto> },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useApplicantControllerCreateHook>>>,
  TError,
  { data: BodyType<CreateApplicantDto> },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const applicantControllerCreate = useApplicantControllerCreateHook();

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useApplicantControllerCreateHook>>>,
    { data: BodyType<CreateApplicantDto> }
  > = (props) => {
    const { data } = props ?? {};

    return applicantControllerCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type ApplicantControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useApplicantControllerCreateHook>>>
>;
export type ApplicantControllerCreateMutationBody =
  BodyType<CreateApplicantDto>;
export type ApplicantControllerCreateMutationError = ErrorType<unknown>;

export const useApplicantControllerCreate = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useApplicantControllerCreateHook>>>,
    TError,
    { data: BodyType<CreateApplicantDto> },
    TContext
  >;
}) => {
  const mutationOptions = useApplicantControllerCreateMutationOptions(options);

  return useMutation(mutationOptions);
};

export const useApplicantControllerGetProfileHook = () => {
  const applicantControllerGetProfile = useAxios<GetApplicantDto>();

  return (userId: string, signal?: AbortSignal) => {
    return applicantControllerGetProfile({
      url: `/applicant-profile/get-profile/${userId}`,
      method: "get",
      signal,
    });
  };
};

export const getApplicantControllerGetProfileQueryKey = (userId: string) =>
  [`/applicant-profile/get-profile/${userId}`] as const;

export const useApplicantControllerGetProfileQueryOptions = <
  TData = Awaited<
    ReturnType<ReturnType<typeof useApplicantControllerGetProfileHook>>
  >,
  TError = ErrorType<unknown>,
>(
  userId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<
        ReturnType<ReturnType<typeof useApplicantControllerGetProfileHook>>
      >,
      TError,
      TData
    >;
  },
): UseQueryOptions<
  Awaited<ReturnType<ReturnType<typeof useApplicantControllerGetProfileHook>>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getApplicantControllerGetProfileQueryKey(userId);

  const applicantControllerGetProfile = useApplicantControllerGetProfileHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useApplicantControllerGetProfileHook>>>
  > = ({ signal }) => applicantControllerGetProfile(userId, signal);

  return { queryKey, queryFn, enabled: !!userId, ...queryOptions };
};

export type ApplicantControllerGetProfileQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useApplicantControllerGetProfileHook>>>
>;
export type ApplicantControllerGetProfileQueryError = ErrorType<unknown>;

export const useApplicantControllerGetProfile = <
  TData = Awaited<
    ReturnType<ReturnType<typeof useApplicantControllerGetProfileHook>>
  >,
  TError = ErrorType<unknown>,
>(
  userId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<
        ReturnType<ReturnType<typeof useApplicantControllerGetProfileHook>>
      >,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useApplicantControllerGetProfileQueryOptions(
    userId,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const useApplicantControllerGetSocialHook = () => {
  const applicantControllerGetSocial = useAxios<SocialProfileResponse>();

  return (userId: string, signal?: AbortSignal) => {
    return applicantControllerGetSocial({
      url: `/applicant-profile/get-social/${userId}`,
      method: "get",
      signal,
    });
  };
};

export const getApplicantControllerGetSocialQueryKey = (userId: string) =>
  [`/applicant-profile/get-social/${userId}`] as const;

export const useApplicantControllerGetSocialQueryOptions = <
  TData = Awaited<
    ReturnType<ReturnType<typeof useApplicantControllerGetSocialHook>>
  >,
  TError = ErrorType<unknown>,
>(
  userId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<
        ReturnType<ReturnType<typeof useApplicantControllerGetSocialHook>>
      >,
      TError,
      TData
    >;
  },
): UseQueryOptions<
  Awaited<ReturnType<ReturnType<typeof useApplicantControllerGetSocialHook>>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getApplicantControllerGetSocialQueryKey(userId);

  const applicantControllerGetSocial = useApplicantControllerGetSocialHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useApplicantControllerGetSocialHook>>>
  > = ({ signal }) => applicantControllerGetSocial(userId, signal);

  return { queryKey, queryFn, enabled: !!userId, ...queryOptions };
};

export type ApplicantControllerGetSocialQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useApplicantControllerGetSocialHook>>>
>;
export type ApplicantControllerGetSocialQueryError = ErrorType<unknown>;

export const useApplicantControllerGetSocial = <
  TData = Awaited<
    ReturnType<ReturnType<typeof useApplicantControllerGetSocialHook>>
  >,
  TError = ErrorType<unknown>,
>(
  userId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<
        ReturnType<ReturnType<typeof useApplicantControllerGetSocialHook>>
      >,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useApplicantControllerGetSocialQueryOptions(
    userId,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const useApplicantControllerGetPersonalHook = () => {
  const applicantControllerGetPersonal = useAxios<PersonalProfileResponse>();

  return (userId: string, signal?: AbortSignal) => {
    return applicantControllerGetPersonal({
      url: `/applicant-profile/get-personal/${userId}`,
      method: "get",
      signal,
    });
  };
};

export const getApplicantControllerGetPersonalQueryKey = (userId: string) =>
  [`/applicant-profile/get-personal/${userId}`] as const;

export const useApplicantControllerGetPersonalQueryOptions = <
  TData = Awaited<
    ReturnType<ReturnType<typeof useApplicantControllerGetPersonalHook>>
  >,
  TError = ErrorType<unknown>,
>(
  userId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<
        ReturnType<ReturnType<typeof useApplicantControllerGetPersonalHook>>
      >,
      TError,
      TData
    >;
  },
): UseQueryOptions<
  Awaited<ReturnType<ReturnType<typeof useApplicantControllerGetPersonalHook>>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getApplicantControllerGetPersonalQueryKey(userId);

  const applicantControllerGetPersonal =
    useApplicantControllerGetPersonalHook();

  const queryFn: QueryFunction<
    Awaited<
      ReturnType<ReturnType<typeof useApplicantControllerGetPersonalHook>>
    >
  > = ({ signal }) => applicantControllerGetPersonal(userId, signal);

  return { queryKey, queryFn, enabled: !!userId, ...queryOptions };
};

export type ApplicantControllerGetPersonalQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useApplicantControllerGetPersonalHook>>>
>;
export type ApplicantControllerGetPersonalQueryError = ErrorType<unknown>;

export const useApplicantControllerGetPersonal = <
  TData = Awaited<
    ReturnType<ReturnType<typeof useApplicantControllerGetPersonalHook>>
  >,
  TError = ErrorType<unknown>,
>(
  userId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<
        ReturnType<ReturnType<typeof useApplicantControllerGetPersonalHook>>
      >,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useApplicantControllerGetPersonalQueryOptions(
    userId,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const useApplicantControllerUpdateHook = () => {
  const applicantControllerUpdate = useAxios<void>();

  return (userId: string, createApplicantDto: BodyType<CreateApplicantDto>) => {
    return applicantControllerUpdate({
      url: `/applicant-profile/${userId}`,
      method: "patch",
      headers: { "Content-Type": "application/json" },
      data: createApplicantDto,
    });
  };
};

export const useApplicantControllerUpdateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useApplicantControllerUpdateHook>>>,
    TError,
    { userId: string; data: BodyType<CreateApplicantDto> },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useApplicantControllerUpdateHook>>>,
  TError,
  { userId: string; data: BodyType<CreateApplicantDto> },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const applicantControllerUpdate = useApplicantControllerUpdateHook();

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useApplicantControllerUpdateHook>>>,
    { userId: string; data: BodyType<CreateApplicantDto> }
  > = (props) => {
    const { userId, data } = props ?? {};

    return applicantControllerUpdate(userId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type ApplicantControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useApplicantControllerUpdateHook>>>
>;
export type ApplicantControllerUpdateMutationBody =
  BodyType<CreateApplicantDto>;
export type ApplicantControllerUpdateMutationError = ErrorType<unknown>;

export const useApplicantControllerUpdate = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useApplicantControllerUpdateHook>>>,
    TError,
    { userId: string; data: BodyType<CreateApplicantDto> },
    TContext
  >;
}) => {
  const mutationOptions = useApplicantControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};

export const useInterviewerControllerCreateHook = () => {
  const interviewerControllerCreate = useAxios<void>();

  return (createInterviewerDto: BodyType<CreateInterviewerDto>) => {
    return interviewerControllerCreate({
      url: `/interviewer-profile`,
      method: "post",
      headers: { "Content-Type": "application/json" },
      data: createInterviewerDto,
    });
  };
};

export const useInterviewerControllerCreateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useInterviewerControllerCreateHook>>>,
    TError,
    { data: BodyType<CreateInterviewerDto> },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useInterviewerControllerCreateHook>>>,
  TError,
  { data: BodyType<CreateInterviewerDto> },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const interviewerControllerCreate = useInterviewerControllerCreateHook();

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useInterviewerControllerCreateHook>>>,
    { data: BodyType<CreateInterviewerDto> }
  > = (props) => {
    const { data } = props ?? {};

    return interviewerControllerCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type InterviewerControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useInterviewerControllerCreateHook>>>
>;
export type InterviewerControllerCreateMutationBody =
  BodyType<CreateInterviewerDto>;
export type InterviewerControllerCreateMutationError = ErrorType<unknown>;

export const useInterviewerControllerCreate = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useInterviewerControllerCreateHook>>>,
    TError,
    { data: BodyType<CreateInterviewerDto> },
    TContext
  >;
}) => {
  const mutationOptions =
    useInterviewerControllerCreateMutationOptions(options);

  return useMutation(mutationOptions);
};

export const useInterviewerControllerGetAllInterviewersHook = () => {
  const interviewerControllerGetAllInterviewers =
    useAxios<AllInterviewerResponse[]>();

  return (signal?: AbortSignal) => {
    return interviewerControllerGetAllInterviewers({
      url: `/interviewer-profile/get-all-interviewers`,
      method: "get",
      signal,
    });
  };
};

export const getInterviewerControllerGetAllInterviewersQueryKey = () =>
  [`/interviewer-profile/get-all-interviewers`] as const;

export const useInterviewerControllerGetAllInterviewersQueryOptions = <
  TData = Awaited<
    ReturnType<
      ReturnType<typeof useInterviewerControllerGetAllInterviewersHook>
    >
  >,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<
      ReturnType<
        ReturnType<typeof useInterviewerControllerGetAllInterviewersHook>
      >
    >,
    TError,
    TData
  >;
}): UseQueryOptions<
  Awaited<
    ReturnType<
      ReturnType<typeof useInterviewerControllerGetAllInterviewersHook>
    >
  >,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getInterviewerControllerGetAllInterviewersQueryKey();

  const interviewerControllerGetAllInterviewers =
    useInterviewerControllerGetAllInterviewersHook();

  const queryFn: QueryFunction<
    Awaited<
      ReturnType<
        ReturnType<typeof useInterviewerControllerGetAllInterviewersHook>
      >
    >
  > = ({ signal }) => interviewerControllerGetAllInterviewers(signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type InterviewerControllerGetAllInterviewersQueryResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof useInterviewerControllerGetAllInterviewersHook>
    >
  >
>;
export type InterviewerControllerGetAllInterviewersQueryError =
  ErrorType<unknown>;

export const useInterviewerControllerGetAllInterviewers = <
  TData = Awaited<
    ReturnType<
      ReturnType<typeof useInterviewerControllerGetAllInterviewersHook>
    >
  >,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<
      ReturnType<
        ReturnType<typeof useInterviewerControllerGetAllInterviewersHook>
      >
    >,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    useInterviewerControllerGetAllInterviewersQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const useInterviewerControllerGetProfileHook = () => {
  const interviewerControllerGetProfile = useAxios<GetInterviewerDto>();

  return (userId: string, signal?: AbortSignal) => {
    return interviewerControllerGetProfile({
      url: `/interviewer-profile/get-profile/${userId}`,
      method: "get",
      signal,
    });
  };
};

export const getInterviewerControllerGetProfileQueryKey = (userId: string) =>
  [`/interviewer-profile/get-profile/${userId}`] as const;

export const useInterviewerControllerGetProfileQueryOptions = <
  TData = Awaited<
    ReturnType<ReturnType<typeof useInterviewerControllerGetProfileHook>>
  >,
  TError = ErrorType<unknown>,
>(
  userId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<
        ReturnType<ReturnType<typeof useInterviewerControllerGetProfileHook>>
      >,
      TError,
      TData
    >;
  },
): UseQueryOptions<
  Awaited<
    ReturnType<ReturnType<typeof useInterviewerControllerGetProfileHook>>
  >,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getInterviewerControllerGetProfileQueryKey(userId);

  const interviewerControllerGetProfile =
    useInterviewerControllerGetProfileHook();

  const queryFn: QueryFunction<
    Awaited<
      ReturnType<ReturnType<typeof useInterviewerControllerGetProfileHook>>
    >
  > = ({ signal }) => interviewerControllerGetProfile(userId, signal);

  return { queryKey, queryFn, enabled: !!userId, ...queryOptions };
};

export type InterviewerControllerGetProfileQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useInterviewerControllerGetProfileHook>>>
>;
export type InterviewerControllerGetProfileQueryError = ErrorType<unknown>;

export const useInterviewerControllerGetProfile = <
  TData = Awaited<
    ReturnType<ReturnType<typeof useInterviewerControllerGetProfileHook>>
  >,
  TError = ErrorType<unknown>,
>(
  userId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<
        ReturnType<ReturnType<typeof useInterviewerControllerGetProfileHook>>
      >,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useInterviewerControllerGetProfileQueryOptions(
    userId,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const useInterviewerControllerGetPersonalHook = () => {
  const interviewerControllerGetPersonal =
    useAxios<InterviewerProfileResponse>();

  return (userId: string, signal?: AbortSignal) => {
    return interviewerControllerGetPersonal({
      url: `/interviewer-profile/get-personal/${userId}`,
      method: "get",
      signal,
    });
  };
};

export const getInterviewerControllerGetPersonalQueryKey = (userId: string) =>
  [`/interviewer-profile/get-personal/${userId}`] as const;

export const useInterviewerControllerGetPersonalQueryOptions = <
  TData = Awaited<
    ReturnType<ReturnType<typeof useInterviewerControllerGetPersonalHook>>
  >,
  TError = ErrorType<unknown>,
>(
  userId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<
        ReturnType<ReturnType<typeof useInterviewerControllerGetPersonalHook>>
      >,
      TError,
      TData
    >;
  },
): UseQueryOptions<
  Awaited<
    ReturnType<ReturnType<typeof useInterviewerControllerGetPersonalHook>>
  >,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getInterviewerControllerGetPersonalQueryKey(userId);

  const interviewerControllerGetPersonal =
    useInterviewerControllerGetPersonalHook();

  const queryFn: QueryFunction<
    Awaited<
      ReturnType<ReturnType<typeof useInterviewerControllerGetPersonalHook>>
    >
  > = ({ signal }) => interviewerControllerGetPersonal(userId, signal);

  return { queryKey, queryFn, enabled: !!userId, ...queryOptions };
};

export type InterviewerControllerGetPersonalQueryResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof useInterviewerControllerGetPersonalHook>>
  >
>;
export type InterviewerControllerGetPersonalQueryError = ErrorType<unknown>;

export const useInterviewerControllerGetPersonal = <
  TData = Awaited<
    ReturnType<ReturnType<typeof useInterviewerControllerGetPersonalHook>>
  >,
  TError = ErrorType<unknown>,
>(
  userId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<
        ReturnType<ReturnType<typeof useInterviewerControllerGetPersonalHook>>
      >,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useInterviewerControllerGetPersonalQueryOptions(
    userId,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const useInterviewerControllerUpdateHook = () => {
  const interviewerControllerUpdate = useAxios<void>();

  return (
    userId: string,
    updateInterviewerDto: BodyType<UpdateInterviewerDto>,
  ) => {
    return interviewerControllerUpdate({
      url: `/interviewer-profile/${userId}`,
      method: "patch",
      headers: { "Content-Type": "application/json" },
      data: updateInterviewerDto,
    });
  };
};

export const useInterviewerControllerUpdateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useInterviewerControllerUpdateHook>>>,
    TError,
    { userId: string; data: BodyType<UpdateInterviewerDto> },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useInterviewerControllerUpdateHook>>>,
  TError,
  { userId: string; data: BodyType<UpdateInterviewerDto> },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const interviewerControllerUpdate = useInterviewerControllerUpdateHook();

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useInterviewerControllerUpdateHook>>>,
    { userId: string; data: BodyType<UpdateInterviewerDto> }
  > = (props) => {
    const { userId, data } = props ?? {};

    return interviewerControllerUpdate(userId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type InterviewerControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useInterviewerControllerUpdateHook>>>
>;
export type InterviewerControllerUpdateMutationBody =
  BodyType<UpdateInterviewerDto>;
export type InterviewerControllerUpdateMutationError = ErrorType<unknown>;

export const useInterviewerControllerUpdate = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useInterviewerControllerUpdateHook>>>,
    TError,
    { userId: string; data: BodyType<UpdateInterviewerDto> },
    TContext
  >;
}) => {
  const mutationOptions =
    useInterviewerControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};

export const useScheduleControllerBulkCreateHook = () => {
  const scheduleControllerBulkCreate = useAxios<void>();

  return (bulkCreateScheduleDto: BodyType<BulkCreateScheduleDto>) => {
    return scheduleControllerBulkCreate({
      url: `/interviewer-availability`,
      method: "post",
      headers: { "Content-Type": "application/json" },
      data: bulkCreateScheduleDto,
    });
  };
};

export const useScheduleControllerBulkCreateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useScheduleControllerBulkCreateHook>>>,
    TError,
    { data: BodyType<BulkCreateScheduleDto> },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useScheduleControllerBulkCreateHook>>>,
  TError,
  { data: BodyType<BulkCreateScheduleDto> },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const scheduleControllerBulkCreate = useScheduleControllerBulkCreateHook();

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useScheduleControllerBulkCreateHook>>>,
    { data: BodyType<BulkCreateScheduleDto> }
  > = (props) => {
    const { data } = props ?? {};

    return scheduleControllerBulkCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type ScheduleControllerBulkCreateMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useScheduleControllerBulkCreateHook>>>
>;
export type ScheduleControllerBulkCreateMutationBody =
  BodyType<BulkCreateScheduleDto>;
export type ScheduleControllerBulkCreateMutationError = ErrorType<unknown>;

export const useScheduleControllerBulkCreate = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useScheduleControllerBulkCreateHook>>>,
    TError,
    { data: BodyType<BulkCreateScheduleDto> },
    TContext
  >;
}) => {
  const mutationOptions =
    useScheduleControllerBulkCreateMutationOptions(options);

  return useMutation(mutationOptions);
};

export const useScheduleControllerFindAllHook = () => {
  const scheduleControllerFindAll = useAxios<GetInterviewScheduleDto[]>();

  return (interviewerId: number, signal?: AbortSignal) => {
    return scheduleControllerFindAll({
      url: `/interviewer-availability/get-all-schedule/${interviewerId}`,
      method: "get",
      signal,
    });
  };
};

export const getScheduleControllerFindAllQueryKey = (interviewerId: number) =>
  [`/interviewer-availability/get-all-schedule/${interviewerId}`] as const;

export const useScheduleControllerFindAllQueryOptions = <
  TData = Awaited<
    ReturnType<ReturnType<typeof useScheduleControllerFindAllHook>>
  >,
  TError = ErrorType<unknown>,
>(
  interviewerId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useScheduleControllerFindAllHook>>>,
      TError,
      TData
    >;
  },
): UseQueryOptions<
  Awaited<ReturnType<ReturnType<typeof useScheduleControllerFindAllHook>>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getScheduleControllerFindAllQueryKey(interviewerId);

  const scheduleControllerFindAll = useScheduleControllerFindAllHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useScheduleControllerFindAllHook>>>
  > = ({ signal }) => scheduleControllerFindAll(interviewerId, signal);

  return { queryKey, queryFn, enabled: !!interviewerId, ...queryOptions };
};

export type ScheduleControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useScheduleControllerFindAllHook>>>
>;
export type ScheduleControllerFindAllQueryError = ErrorType<unknown>;

export const useScheduleControllerFindAll = <
  TData = Awaited<
    ReturnType<ReturnType<typeof useScheduleControllerFindAllHook>>
  >,
  TError = ErrorType<unknown>,
>(
  interviewerId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useScheduleControllerFindAllHook>>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useScheduleControllerFindAllQueryOptions(
    interviewerId,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const useScheduleControllerFindOneHook = () => {
  const scheduleControllerFindOne = useAxios<CreateScheduleDto>();

  return (availabilityId: string, signal?: AbortSignal) => {
    return scheduleControllerFindOne({
      url: `/interviewer-availability/${availabilityId}`,
      method: "get",
      signal,
    });
  };
};

export const getScheduleControllerFindOneQueryKey = (availabilityId: string) =>
  [`/interviewer-availability/${availabilityId}`] as const;

export const useScheduleControllerFindOneQueryOptions = <
  TData = Awaited<
    ReturnType<ReturnType<typeof useScheduleControllerFindOneHook>>
  >,
  TError = ErrorType<unknown>,
>(
  availabilityId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useScheduleControllerFindOneHook>>>,
      TError,
      TData
    >;
  },
): UseQueryOptions<
  Awaited<ReturnType<ReturnType<typeof useScheduleControllerFindOneHook>>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getScheduleControllerFindOneQueryKey(availabilityId);

  const scheduleControllerFindOne = useScheduleControllerFindOneHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useScheduleControllerFindOneHook>>>
  > = ({ signal }) => scheduleControllerFindOne(availabilityId, signal);

  return { queryKey, queryFn, enabled: !!availabilityId, ...queryOptions };
};

export type ScheduleControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useScheduleControllerFindOneHook>>>
>;
export type ScheduleControllerFindOneQueryError = ErrorType<unknown>;

export const useScheduleControllerFindOne = <
  TData = Awaited<
    ReturnType<ReturnType<typeof useScheduleControllerFindOneHook>>
  >,
  TError = ErrorType<unknown>,
>(
  availabilityId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useScheduleControllerFindOneHook>>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useScheduleControllerFindOneQueryOptions(
    availabilityId,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const useScheduleControllerRemoveHook = () => {
  const scheduleControllerRemove = useAxios<void>();

  return (availabilityId: string) => {
    return scheduleControllerRemove({
      url: `/interviewer-availability/${availabilityId}`,
      method: "delete",
    });
  };
};

export const useScheduleControllerRemoveMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useScheduleControllerRemoveHook>>>,
    TError,
    { availabilityId: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useScheduleControllerRemoveHook>>>,
  TError,
  { availabilityId: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const scheduleControllerRemove = useScheduleControllerRemoveHook();

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useScheduleControllerRemoveHook>>>,
    { availabilityId: string }
  > = (props) => {
    const { availabilityId } = props ?? {};

    return scheduleControllerRemove(availabilityId);
  };

  return { mutationFn, ...mutationOptions };
};

export type ScheduleControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useScheduleControllerRemoveHook>>>
>;

export type ScheduleControllerRemoveMutationError = ErrorType<unknown>;

export const useScheduleControllerRemove = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useScheduleControllerRemoveHook>>>,
    TError,
    { availabilityId: string },
    TContext
  >;
}) => {
  const mutationOptions = useScheduleControllerRemoveMutationOptions(options);

  return useMutation(mutationOptions);
};

export const useSkillControllerCreateHook = () => {
  const skillControllerCreate = useAxios<void>();

  return (createSkillDto: BodyType<CreateSkillDto>) => {
    return skillControllerCreate({
      url: `/skill`,
      method: "post",
      headers: { "Content-Type": "application/json" },
      data: createSkillDto,
    });
  };
};

export const useSkillControllerCreateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useSkillControllerCreateHook>>>,
    TError,
    { data: BodyType<CreateSkillDto> },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useSkillControllerCreateHook>>>,
  TError,
  { data: BodyType<CreateSkillDto> },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const skillControllerCreate = useSkillControllerCreateHook();

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useSkillControllerCreateHook>>>,
    { data: BodyType<CreateSkillDto> }
  > = (props) => {
    const { data } = props ?? {};

    return skillControllerCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type SkillControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useSkillControllerCreateHook>>>
>;
export type SkillControllerCreateMutationBody = BodyType<CreateSkillDto>;
export type SkillControllerCreateMutationError = ErrorType<unknown>;

export const useSkillControllerCreate = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useSkillControllerCreateHook>>>,
    TError,
    { data: BodyType<CreateSkillDto> },
    TContext
  >;
}) => {
  const mutationOptions = useSkillControllerCreateMutationOptions(options);

  return useMutation(mutationOptions);
};

export const useSkillControllerFindAllHook = () => {
  const skillControllerFindAll = useAxios<AllSkillResponse[]>();

  return (signal?: AbortSignal) => {
    return skillControllerFindAll({ url: `/skill`, method: "get", signal });
  };
};

export const getSkillControllerFindAllQueryKey = () => [`/skill`] as const;

export const useSkillControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useSkillControllerFindAllHook>>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useSkillControllerFindAllHook>>>,
    TError,
    TData
  >;
}): UseQueryOptions<
  Awaited<ReturnType<ReturnType<typeof useSkillControllerFindAllHook>>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSkillControllerFindAllQueryKey();

  const skillControllerFindAll = useSkillControllerFindAllHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useSkillControllerFindAllHook>>>
  > = ({ signal }) => skillControllerFindAll(signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type SkillControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useSkillControllerFindAllHook>>>
>;
export type SkillControllerFindAllQueryError = ErrorType<unknown>;

export const useSkillControllerFindAll = <
  TData = Awaited<ReturnType<ReturnType<typeof useSkillControllerFindAllHook>>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useSkillControllerFindAllHook>>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useSkillControllerFindAllQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const useSkillControllerFindOneHook = () => {
  const skillControllerFindOne = useAxios<UserSkillResponse[]>();

  return (userId: string, signal?: AbortSignal) => {
    return skillControllerFindOne({
      url: `/skill/find-skill-of-user/${userId}`,
      method: "get",
      signal,
    });
  };
};

export const getSkillControllerFindOneQueryKey = (userId: string) =>
  [`/skill/find-skill-of-user/${userId}`] as const;

export const useSkillControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useSkillControllerFindOneHook>>>,
  TError = ErrorType<unknown>,
>(
  userId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useSkillControllerFindOneHook>>>,
      TError,
      TData
    >;
  },
): UseQueryOptions<
  Awaited<ReturnType<ReturnType<typeof useSkillControllerFindOneHook>>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSkillControllerFindOneQueryKey(userId);

  const skillControllerFindOne = useSkillControllerFindOneHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useSkillControllerFindOneHook>>>
  > = ({ signal }) => skillControllerFindOne(userId, signal);

  return { queryKey, queryFn, enabled: !!userId, ...queryOptions };
};

export type SkillControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useSkillControllerFindOneHook>>>
>;
export type SkillControllerFindOneQueryError = ErrorType<unknown>;

export const useSkillControllerFindOne = <
  TData = Awaited<ReturnType<ReturnType<typeof useSkillControllerFindOneHook>>>,
  TError = ErrorType<unknown>,
>(
  userId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useSkillControllerFindOneHook>>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useSkillControllerFindOneQueryOptions(userId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const useSkillControllerUpdateHook = () => {
  const skillControllerUpdate = useAxios<void>();

  return (skillId: string, updateSkillDto: BodyType<UpdateSkillDto>) => {
    return skillControllerUpdate({
      url: `/skill/${skillId}`,
      method: "patch",
      headers: { "Content-Type": "application/json" },
      data: updateSkillDto,
    });
  };
};

export const useSkillControllerUpdateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useSkillControllerUpdateHook>>>,
    TError,
    { skillId: string; data: BodyType<UpdateSkillDto> },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useSkillControllerUpdateHook>>>,
  TError,
  { skillId: string; data: BodyType<UpdateSkillDto> },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const skillControllerUpdate = useSkillControllerUpdateHook();

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useSkillControllerUpdateHook>>>,
    { skillId: string; data: BodyType<UpdateSkillDto> }
  > = (props) => {
    const { skillId, data } = props ?? {};

    return skillControllerUpdate(skillId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type SkillControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useSkillControllerUpdateHook>>>
>;
export type SkillControllerUpdateMutationBody = BodyType<UpdateSkillDto>;
export type SkillControllerUpdateMutationError = ErrorType<unknown>;

export const useSkillControllerUpdate = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useSkillControllerUpdateHook>>>,
    TError,
    { skillId: string; data: BodyType<UpdateSkillDto> },
    TContext
  >;
}) => {
  const mutationOptions = useSkillControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};

export const useSkillControllerRemoveHook = () => {
  const skillControllerRemove = useAxios<void>();

  return (userId: string, skillId: string) => {
    return skillControllerRemove({
      url: `/skill/${userId}/${skillId}`,
      method: "delete",
    });
  };
};

export const useSkillControllerRemoveMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useSkillControllerRemoveHook>>>,
    TError,
    { userId: string; skillId: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useSkillControllerRemoveHook>>>,
  TError,
  { userId: string; skillId: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const skillControllerRemove = useSkillControllerRemoveHook();

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useSkillControllerRemoveHook>>>,
    { userId: string; skillId: string }
  > = (props) => {
    const { userId, skillId } = props ?? {};

    return skillControllerRemove(userId, skillId);
  };

  return { mutationFn, ...mutationOptions };
};

export type SkillControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useSkillControllerRemoveHook>>>
>;

export type SkillControllerRemoveMutationError = ErrorType<unknown>;

export const useSkillControllerRemove = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useSkillControllerRemoveHook>>>,
    TError,
    { userId: string; skillId: string },
    TContext
  >;
}) => {
  const mutationOptions = useSkillControllerRemoveMutationOptions(options);

  return useMutation(mutationOptions);
};

export const useInterviewControllerCreateHook = () => {
  const interviewControllerCreate = useAxios<void>();

  return (createInterviewDto: BodyType<CreateInterviewDto>) => {
    return interviewControllerCreate({
      url: `/interview`,
      method: "post",
      headers: { "Content-Type": "application/json" },
      data: createInterviewDto,
    });
  };
};

export const useInterviewControllerCreateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useInterviewControllerCreateHook>>>,
    TError,
    { data: BodyType<CreateInterviewDto> },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useInterviewControllerCreateHook>>>,
  TError,
  { data: BodyType<CreateInterviewDto> },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const interviewControllerCreate = useInterviewControllerCreateHook();

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useInterviewControllerCreateHook>>>,
    { data: BodyType<CreateInterviewDto> }
  > = (props) => {
    const { data } = props ?? {};

    return interviewControllerCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type InterviewControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useInterviewControllerCreateHook>>>
>;
export type InterviewControllerCreateMutationBody =
  BodyType<CreateInterviewDto>;
export type InterviewControllerCreateMutationError = ErrorType<unknown>;

export const useInterviewControllerCreate = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useInterviewControllerCreateHook>>>,
    TError,
    { data: BodyType<CreateInterviewDto> },
    TContext
  >;
}) => {
  const mutationOptions = useInterviewControllerCreateMutationOptions(options);

  return useMutation(mutationOptions);
};

export const useInterviewControllerPayForInterviewHook = () => {
  const interviewControllerPayForInterview = useAxios<KhaltiResponse>();

  return (payForInterViewDto: BodyType<PayForInterViewDto>) => {
    return interviewControllerPayForInterview({
      url: `/interview/pay-for-interview`,
      method: "post",
      headers: { "Content-Type": "application/json" },
      data: payForInterViewDto,
    });
  };
};

export const useInterviewControllerPayForInterviewMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<
      ReturnType<ReturnType<typeof useInterviewControllerPayForInterviewHook>>
    >,
    TError,
    { data: BodyType<PayForInterViewDto> },
    TContext
  >;
}): UseMutationOptions<
  Awaited<
    ReturnType<ReturnType<typeof useInterviewControllerPayForInterviewHook>>
  >,
  TError,
  { data: BodyType<PayForInterViewDto> },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const interviewControllerPayForInterview =
    useInterviewControllerPayForInterviewHook();

  const mutationFn: MutationFunction<
    Awaited<
      ReturnType<ReturnType<typeof useInterviewControllerPayForInterviewHook>>
    >,
    { data: BodyType<PayForInterViewDto> }
  > = (props) => {
    const { data } = props ?? {};

    return interviewControllerPayForInterview(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type InterviewControllerPayForInterviewMutationResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof useInterviewControllerPayForInterviewHook>>
  >
>;
export type InterviewControllerPayForInterviewMutationBody =
  BodyType<PayForInterViewDto>;
export type InterviewControllerPayForInterviewMutationError =
  ErrorType<unknown>;

export const useInterviewControllerPayForInterview = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<
      ReturnType<ReturnType<typeof useInterviewControllerPayForInterviewHook>>
    >,
    TError,
    { data: BodyType<PayForInterViewDto> },
    TContext
  >;
}) => {
  const mutationOptions =
    useInterviewControllerPayForInterviewMutationOptions(options);

  return useMutation(mutationOptions);
};

export const useInterviewControllerCheckPaymentHook = () => {
  const interviewControllerCheckPayment = useAxios<KhaltiResponse>();

  return (checkForPaymentDto: BodyType<CheckForPaymentDto>) => {
    return interviewControllerCheckPayment({
      url: `/interview/check-for-payment`,
      method: "post",
      headers: { "Content-Type": "application/json" },
      data: checkForPaymentDto,
    });
  };
};

export const useInterviewControllerCheckPaymentMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<
      ReturnType<ReturnType<typeof useInterviewControllerCheckPaymentHook>>
    >,
    TError,
    { data: BodyType<CheckForPaymentDto> },
    TContext
  >;
}): UseMutationOptions<
  Awaited<
    ReturnType<ReturnType<typeof useInterviewControllerCheckPaymentHook>>
  >,
  TError,
  { data: BodyType<CheckForPaymentDto> },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const interviewControllerCheckPayment =
    useInterviewControllerCheckPaymentHook();

  const mutationFn: MutationFunction<
    Awaited<
      ReturnType<ReturnType<typeof useInterviewControllerCheckPaymentHook>>
    >,
    { data: BodyType<CheckForPaymentDto> }
  > = (props) => {
    const { data } = props ?? {};

    return interviewControllerCheckPayment(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type InterviewControllerCheckPaymentMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useInterviewControllerCheckPaymentHook>>>
>;
export type InterviewControllerCheckPaymentMutationBody =
  BodyType<CheckForPaymentDto>;
export type InterviewControllerCheckPaymentMutationError = ErrorType<unknown>;

export const useInterviewControllerCheckPayment = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<
      ReturnType<ReturnType<typeof useInterviewControllerCheckPaymentHook>>
    >,
    TError,
    { data: BodyType<CheckForPaymentDto> },
    TContext
  >;
}) => {
  const mutationOptions =
    useInterviewControllerCheckPaymentMutationOptions(options);

  return useMutation(mutationOptions);
};

export const useInterviewControllerGetInterviewerInterviewHook = () => {
  const interviewControllerGetInterviewerInterview =
    useAxios<InterviewerResponse[]>();

  return (interviewerId: string, signal?: AbortSignal) => {
    return interviewControllerGetInterviewerInterview({
      url: `/interview/interviewer-interviews/${interviewerId}`,
      method: "get",
      signal,
    });
  };
};

export const getInterviewControllerGetInterviewerInterviewQueryKey = (
  interviewerId: string,
) => [`/interview/interviewer-interviews/${interviewerId}`] as const;

export const useInterviewControllerGetInterviewerInterviewQueryOptions = <
  TData = Awaited<
    ReturnType<
      ReturnType<typeof useInterviewControllerGetInterviewerInterviewHook>
    >
  >,
  TError = ErrorType<unknown>,
>(
  interviewerId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<
        ReturnType<
          ReturnType<typeof useInterviewControllerGetInterviewerInterviewHook>
        >
      >,
      TError,
      TData
    >;
  },
): UseQueryOptions<
  Awaited<
    ReturnType<
      ReturnType<typeof useInterviewControllerGetInterviewerInterviewHook>
    >
  >,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getInterviewControllerGetInterviewerInterviewQueryKey(interviewerId);

  const interviewControllerGetInterviewerInterview =
    useInterviewControllerGetInterviewerInterviewHook();

  const queryFn: QueryFunction<
    Awaited<
      ReturnType<
        ReturnType<typeof useInterviewControllerGetInterviewerInterviewHook>
      >
    >
  > = ({ signal }) =>
    interviewControllerGetInterviewerInterview(interviewerId, signal);

  return { queryKey, queryFn, enabled: !!interviewerId, ...queryOptions };
};

export type InterviewControllerGetInterviewerInterviewQueryResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof useInterviewControllerGetInterviewerInterviewHook>
    >
  >
>;
export type InterviewControllerGetInterviewerInterviewQueryError =
  ErrorType<unknown>;

export const useInterviewControllerGetInterviewerInterview = <
  TData = Awaited<
    ReturnType<
      ReturnType<typeof useInterviewControllerGetInterviewerInterviewHook>
    >
  >,
  TError = ErrorType<unknown>,
>(
  interviewerId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<
        ReturnType<
          ReturnType<typeof useInterviewControllerGetInterviewerInterviewHook>
        >
      >,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    useInterviewControllerGetInterviewerInterviewQueryOptions(
      interviewerId,
      options,
    );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const useInterviewControllerGetApplicantInterviewHook = () => {
  const interviewControllerGetApplicantInterview =
    useAxios<ApplicantResponse[]>();

  return (applicantId: string, signal?: AbortSignal) => {
    return interviewControllerGetApplicantInterview({
      url: `/interview/applicant_interviewer/${applicantId}`,
      method: "get",
      signal,
    });
  };
};

export const getInterviewControllerGetApplicantInterviewQueryKey = (
  applicantId: string,
) => [`/interview/applicant_interviewer/${applicantId}`] as const;

export const useInterviewControllerGetApplicantInterviewQueryOptions = <
  TData = Awaited<
    ReturnType<
      ReturnType<typeof useInterviewControllerGetApplicantInterviewHook>
    >
  >,
  TError = ErrorType<unknown>,
>(
  applicantId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<
        ReturnType<
          ReturnType<typeof useInterviewControllerGetApplicantInterviewHook>
        >
      >,
      TError,
      TData
    >;
  },
): UseQueryOptions<
  Awaited<
    ReturnType<
      ReturnType<typeof useInterviewControllerGetApplicantInterviewHook>
    >
  >,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getInterviewControllerGetApplicantInterviewQueryKey(applicantId);

  const interviewControllerGetApplicantInterview =
    useInterviewControllerGetApplicantInterviewHook();

  const queryFn: QueryFunction<
    Awaited<
      ReturnType<
        ReturnType<typeof useInterviewControllerGetApplicantInterviewHook>
      >
    >
  > = ({ signal }) =>
    interviewControllerGetApplicantInterview(applicantId, signal);

  return { queryKey, queryFn, enabled: !!applicantId, ...queryOptions };
};

export type InterviewControllerGetApplicantInterviewQueryResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof useInterviewControllerGetApplicantInterviewHook>
    >
  >
>;
export type InterviewControllerGetApplicantInterviewQueryError =
  ErrorType<unknown>;

export const useInterviewControllerGetApplicantInterview = <
  TData = Awaited<
    ReturnType<
      ReturnType<typeof useInterviewControllerGetApplicantInterviewHook>
    >
  >,
  TError = ErrorType<unknown>,
>(
  applicantId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<
        ReturnType<
          ReturnType<typeof useInterviewControllerGetApplicantInterviewHook>
        >
      >,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useInterviewControllerGetApplicantInterviewQueryOptions(
    applicantId,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const useFeedbackControllerFeedBackForApplicantHook = () => {
  const feedbackControllerFeedBackForApplicant = useAxios<CreateFeedbackDto>();

  return (createFeedbackDto: BodyType<CreateFeedbackDto>) => {
    return feedbackControllerFeedBackForApplicant({
      url: `/feedback/create-feedback-applicant`,
      method: "post",
      headers: { "Content-Type": "application/json" },
      data: createFeedbackDto,
    });
  };
};

export const useFeedbackControllerFeedBackForApplicantMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<
      ReturnType<
        ReturnType<typeof useFeedbackControllerFeedBackForApplicantHook>
      >
    >,
    TError,
    { data: BodyType<CreateFeedbackDto> },
    TContext
  >;
}): UseMutationOptions<
  Awaited<
    ReturnType<ReturnType<typeof useFeedbackControllerFeedBackForApplicantHook>>
  >,
  TError,
  { data: BodyType<CreateFeedbackDto> },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const feedbackControllerFeedBackForApplicant =
    useFeedbackControllerFeedBackForApplicantHook();

  const mutationFn: MutationFunction<
    Awaited<
      ReturnType<
        ReturnType<typeof useFeedbackControllerFeedBackForApplicantHook>
      >
    >,
    { data: BodyType<CreateFeedbackDto> }
  > = (props) => {
    const { data } = props ?? {};

    return feedbackControllerFeedBackForApplicant(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type FeedbackControllerFeedBackForApplicantMutationResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof useFeedbackControllerFeedBackForApplicantHook>>
  >
>;
export type FeedbackControllerFeedBackForApplicantMutationBody =
  BodyType<CreateFeedbackDto>;
export type FeedbackControllerFeedBackForApplicantMutationError =
  ErrorType<unknown>;

export const useFeedbackControllerFeedBackForApplicant = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<
      ReturnType<
        ReturnType<typeof useFeedbackControllerFeedBackForApplicantHook>
      >
    >,
    TError,
    { data: BodyType<CreateFeedbackDto> },
    TContext
  >;
}) => {
  const mutationOptions =
    useFeedbackControllerFeedBackForApplicantMutationOptions(options);

  return useMutation(mutationOptions);
};

export const useFeedbackControllerFeedBackForInterviewerHook = () => {
  const feedbackControllerFeedBackForInterviewer =
    useAxios<CreateFeedbackInterviewerDto>();

  return (
    createFeedbackInterviewerDto: BodyType<CreateFeedbackInterviewerDto>,
  ) => {
    return feedbackControllerFeedBackForInterviewer({
      url: `/feedback/create-feedback-interviewer`,
      method: "post",
      headers: { "Content-Type": "application/json" },
      data: createFeedbackInterviewerDto,
    });
  };
};

export const useFeedbackControllerFeedBackForInterviewerMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<
      ReturnType<
        ReturnType<typeof useFeedbackControllerFeedBackForInterviewerHook>
      >
    >,
    TError,
    { data: BodyType<CreateFeedbackInterviewerDto> },
    TContext
  >;
}): UseMutationOptions<
  Awaited<
    ReturnType<
      ReturnType<typeof useFeedbackControllerFeedBackForInterviewerHook>
    >
  >,
  TError,
  { data: BodyType<CreateFeedbackInterviewerDto> },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const feedbackControllerFeedBackForInterviewer =
    useFeedbackControllerFeedBackForInterviewerHook();

  const mutationFn: MutationFunction<
    Awaited<
      ReturnType<
        ReturnType<typeof useFeedbackControllerFeedBackForInterviewerHook>
      >
    >,
    { data: BodyType<CreateFeedbackInterviewerDto> }
  > = (props) => {
    const { data } = props ?? {};

    return feedbackControllerFeedBackForInterviewer(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type FeedbackControllerFeedBackForInterviewerMutationResult =
  NonNullable<
    Awaited<
      ReturnType<
        ReturnType<typeof useFeedbackControllerFeedBackForInterviewerHook>
      >
    >
  >;
export type FeedbackControllerFeedBackForInterviewerMutationBody =
  BodyType<CreateFeedbackInterviewerDto>;
export type FeedbackControllerFeedBackForInterviewerMutationError =
  ErrorType<unknown>;

export const useFeedbackControllerFeedBackForInterviewer = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<
      ReturnType<
        ReturnType<typeof useFeedbackControllerFeedBackForInterviewerHook>
      >
    >,
    TError,
    { data: BodyType<CreateFeedbackInterviewerDto> },
    TContext
  >;
}) => {
  const mutationOptions =
    useFeedbackControllerFeedBackForInterviewerMutationOptions(options);

  return useMutation(mutationOptions);
};

export const useFeedbackControllerFindFeedbackInterviewerHook = () => {
  const feedbackControllerFindFeedbackInterviewer =
    useAxios<CreateFeedbackInterviewerDto>();

  return (interviewerId: string, signal?: AbortSignal) => {
    return feedbackControllerFindFeedbackInterviewer({
      url: `/feedback/all-interviewer-feedback/${interviewerId}`,
      method: "get",
      signal,
    });
  };
};

export const getFeedbackControllerFindFeedbackInterviewerQueryKey = (
  interviewerId: string,
) => [`/feedback/all-interviewer-feedback/${interviewerId}`] as const;

export const useFeedbackControllerFindFeedbackInterviewerQueryOptions = <
  TData = Awaited<
    ReturnType<
      ReturnType<typeof useFeedbackControllerFindFeedbackInterviewerHook>
    >
  >,
  TError = ErrorType<unknown>,
>(
  interviewerId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<
        ReturnType<
          ReturnType<typeof useFeedbackControllerFindFeedbackInterviewerHook>
        >
      >,
      TError,
      TData
    >;
  },
): UseQueryOptions<
  Awaited<
    ReturnType<
      ReturnType<typeof useFeedbackControllerFindFeedbackInterviewerHook>
    >
  >,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getFeedbackControllerFindFeedbackInterviewerQueryKey(interviewerId);

  const feedbackControllerFindFeedbackInterviewer =
    useFeedbackControllerFindFeedbackInterviewerHook();

  const queryFn: QueryFunction<
    Awaited<
      ReturnType<
        ReturnType<typeof useFeedbackControllerFindFeedbackInterviewerHook>
      >
    >
  > = ({ signal }) =>
    feedbackControllerFindFeedbackInterviewer(interviewerId, signal);

  return { queryKey, queryFn, enabled: !!interviewerId, ...queryOptions };
};

export type FeedbackControllerFindFeedbackInterviewerQueryResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof useFeedbackControllerFindFeedbackInterviewerHook>
    >
  >
>;
export type FeedbackControllerFindFeedbackInterviewerQueryError =
  ErrorType<unknown>;

export const useFeedbackControllerFindFeedbackInterviewer = <
  TData = Awaited<
    ReturnType<
      ReturnType<typeof useFeedbackControllerFindFeedbackInterviewerHook>
    >
  >,
  TError = ErrorType<unknown>,
>(
  interviewerId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<
        ReturnType<
          ReturnType<typeof useFeedbackControllerFindFeedbackInterviewerHook>
        >
      >,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useFeedbackControllerFindFeedbackInterviewerQueryOptions(
    interviewerId,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const useFeedbackControllerFindFeedbackHook = () => {
  const feedbackControllerFindFeedback = useAxios<CreateFeedbackDto>();

  return (applicantId: string, signal?: AbortSignal) => {
    return feedbackControllerFindFeedback({
      url: `/feedback/all-applicant-feedback/${applicantId}`,
      method: "get",
      signal,
    });
  };
};

export const getFeedbackControllerFindFeedbackQueryKey = (
  applicantId: string,
) => [`/feedback/all-applicant-feedback/${applicantId}`] as const;

export const useFeedbackControllerFindFeedbackQueryOptions = <
  TData = Awaited<
    ReturnType<ReturnType<typeof useFeedbackControllerFindFeedbackHook>>
  >,
  TError = ErrorType<unknown>,
>(
  applicantId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<
        ReturnType<ReturnType<typeof useFeedbackControllerFindFeedbackHook>>
      >,
      TError,
      TData
    >;
  },
): UseQueryOptions<
  Awaited<ReturnType<ReturnType<typeof useFeedbackControllerFindFeedbackHook>>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getFeedbackControllerFindFeedbackQueryKey(applicantId);

  const feedbackControllerFindFeedback =
    useFeedbackControllerFindFeedbackHook();

  const queryFn: QueryFunction<
    Awaited<
      ReturnType<ReturnType<typeof useFeedbackControllerFindFeedbackHook>>
    >
  > = ({ signal }) => feedbackControllerFindFeedback(applicantId, signal);

  return { queryKey, queryFn, enabled: !!applicantId, ...queryOptions };
};

export type FeedbackControllerFindFeedbackQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useFeedbackControllerFindFeedbackHook>>>
>;
export type FeedbackControllerFindFeedbackQueryError = ErrorType<unknown>;

export const useFeedbackControllerFindFeedback = <
  TData = Awaited<
    ReturnType<ReturnType<typeof useFeedbackControllerFindFeedbackHook>>
  >,
  TError = ErrorType<unknown>,
>(
  applicantId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<
        ReturnType<ReturnType<typeof useFeedbackControllerFindFeedbackHook>>
      >,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useFeedbackControllerFindFeedbackQueryOptions(
    applicantId,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
