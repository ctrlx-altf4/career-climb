/**
 * Generated by orval v6.16.0 🍺
 * Do not edit manually.
 * Career Climb
 * The Career Climb API description
 * OpenAPI spec version: 1.0
 */
import { useQuery, useMutation } from "@tanstack/react-query";
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from "@tanstack/react-query";
import { useAxios } from "./useAxios";
import type { ErrorType } from "./useAxios";

export const useAppControllerGetHelloHook = () => {
  const appControllerGetHello = useAxios<void>();

  return (signal?: AbortSignal) => {
    return appControllerGetHello({ url: `/`, method: "get", signal });
  };
};

export const getAppControllerGetHelloQueryKey = () => [`/`] as const;

export const useAppControllerGetHelloQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useAppControllerGetHelloHook>>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useAppControllerGetHelloHook>>>,
    TError,
    TData
  >;
}): UseQueryOptions<
  Awaited<ReturnType<ReturnType<typeof useAppControllerGetHelloHook>>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAppControllerGetHelloQueryKey();

  const appControllerGetHello = useAppControllerGetHelloHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useAppControllerGetHelloHook>>>
  > = ({ signal }) => appControllerGetHello(signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type AppControllerGetHelloQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useAppControllerGetHelloHook>>>
>;
export type AppControllerGetHelloQueryError = ErrorType<unknown>;

export const useAppControllerGetHello = <
  TData = Awaited<ReturnType<ReturnType<typeof useAppControllerGetHelloHook>>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useAppControllerGetHelloHook>>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useAppControllerGetHelloQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const useAuthControllerGoogleAuthHook = () => {
  const authControllerGoogleAuth = useAxios<void>();

  return () => {
    return authControllerGoogleAuth({ url: `/google`, method: "post" });
  };
};

export const useAuthControllerGoogleAuthMutationOptions = <
  TError = ErrorType<unknown>,
  TVariables = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useAuthControllerGoogleAuthHook>>>,
    TError,
    TVariables,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useAuthControllerGoogleAuthHook>>>,
  TError,
  TVariables,
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const authControllerGoogleAuth = useAuthControllerGoogleAuthHook();

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useAuthControllerGoogleAuthHook>>>,
    TVariables
  > = () => {
    return authControllerGoogleAuth();
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerGoogleAuthMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useAuthControllerGoogleAuthHook>>>
>;

export type AuthControllerGoogleAuthMutationError = ErrorType<unknown>;

export const useAuthControllerGoogleAuth = <
  TError = ErrorType<unknown>,
  TVariables = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useAuthControllerGoogleAuthHook>>>,
    TError,
    TVariables,
    TContext
  >;
}) => {
  const mutationOptions = useAuthControllerGoogleAuthMutationOptions(options);

  return useMutation(mutationOptions);
};

export const useAuthControllerGoogleAuthRedirectHook = () => {
  const authControllerGoogleAuthRedirect = useAxios<void>();

  return (signal?: AbortSignal) => {
    return authControllerGoogleAuthRedirect({
      url: `/google/redirect`,
      method: "get",
      signal,
    });
  };
};

export const getAuthControllerGoogleAuthRedirectQueryKey = () =>
  [`/google/redirect`] as const;

export const useAuthControllerGoogleAuthRedirectQueryOptions = <
  TData = Awaited<
    ReturnType<ReturnType<typeof useAuthControllerGoogleAuthRedirectHook>>
  >,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<
      ReturnType<ReturnType<typeof useAuthControllerGoogleAuthRedirectHook>>
    >,
    TError,
    TData
  >;
}): UseQueryOptions<
  Awaited<
    ReturnType<ReturnType<typeof useAuthControllerGoogleAuthRedirectHook>>
  >,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAuthControllerGoogleAuthRedirectQueryKey();

  const authControllerGoogleAuthRedirect =
    useAuthControllerGoogleAuthRedirectHook();

  const queryFn: QueryFunction<
    Awaited<
      ReturnType<ReturnType<typeof useAuthControllerGoogleAuthRedirectHook>>
    >
  > = ({ signal }) => authControllerGoogleAuthRedirect(signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type AuthControllerGoogleAuthRedirectQueryResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof useAuthControllerGoogleAuthRedirectHook>>
  >
>;
export type AuthControllerGoogleAuthRedirectQueryError = ErrorType<unknown>;

export const useAuthControllerGoogleAuthRedirect = <
  TData = Awaited<
    ReturnType<ReturnType<typeof useAuthControllerGoogleAuthRedirectHook>>
  >,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<
      ReturnType<ReturnType<typeof useAuthControllerGoogleAuthRedirectHook>>
    >,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useAuthControllerGoogleAuthRedirectQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
